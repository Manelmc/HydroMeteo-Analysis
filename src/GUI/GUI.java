/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package GUI;

import controllers.GUIcontroller;
import hydrometeo_analysis.ANN;
import hydrometeo_analysis.Calculus;
import hydrometeo_analysis.Table;
import java.awt.BorderLayout;
import java.awt.Dimension;
import java.awt.Graphics;
import java.awt.Image;
import java.awt.Toolkit;
import java.awt.event.KeyEvent;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.awt.image.BufferedImage;
import java.sql.ResultSet;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Collections;
import java.util.HashMap;
import java.util.Hashtable;
import java.util.List;
import java.util.Vector;
import javax.swing.ImageIcon;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JMenuItem;
import static javax.swing.JOptionPane.showMessageDialog;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JSpinner;
import javax.swing.JTabbedPane;
import javax.swing.JTable;
import javax.swing.SpinnerDateModel;
import javax.swing.event.ChangeEvent;
import javax.swing.event.ChangeListener;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Manel
 */
public class GUI extends javax.swing.JFrame {
    private final GUIcontroller GUIcon = new GUIcontroller();
    private final Menu MENU;
    private Table table = Table.SEACURRENT;
    private int MouseDraggedX = -1; private int MouseDraggedY = -1;
    private int MapWidth = -1; private int MapHeight = -1;
    private HashMap<String,Object[]> XReference = new HashMap();
    private int AreaCounter = 0;
    private boolean selectArea = false;
    private boolean justDragged = false;
    int TableCounter = 0;
    
    public class MyPanel extends JPanel{
            private final Image image;

            public MyPanel(Image image) {
               this.image = image;
            }

            @Override
            protected void paintComponent(Graphics g) {
                super.paintComponent(g);
                g.drawImage(image, 0, 0, null); // see javadoc for more info on the parameters            
            }

    }
    /**
     * Creates new form GUI
     */
    
    public GUI() {
        super("HydroMeteo Analysis");
        this.MENU = new Menu(this);
        initComponents();
        createSpinner();
        createMenus();
        jRadioButton1.setSelected(true);
        jTextField11.setEnabled(false);
        Dimension dim = Toolkit.getDefaultToolkit().getScreenSize();
        int width = dim.width;
        if(951 < width) width = 951;
        this.setSize(width, dim.height - 45);
        this.pack();
          
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jTextField8 = new javax.swing.JTextField();
        jLabel10 = new javax.swing.JLabel();
        jTextField9 = new javax.swing.JTextField();
        jRadioButton1 = new javax.swing.JRadioButton();
        jRadioButton2 = new javax.swing.JRadioButton();
        jButton2 = new javax.swing.JButton();
        jLabel11 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        jTextField11 = new javax.swing.JTextField();
        jLabel13 = new javax.swing.JLabel();
        jDateChooser1 = new com.toedter.calendar.JDateChooser();
        jSpinner2 = new javax.swing.JSpinner();
        jCheckBox2 = new javax.swing.JCheckBox();
        jCheckBox3 = new javax.swing.JCheckBox();
        jDateChooser2 = new com.toedter.calendar.JDateChooser();
        jSpinner4 = new javax.swing.JSpinner();
        jCheckBox1 = new javax.swing.JCheckBox();
        jTextField1 = new javax.swing.JTextField();
        jTextField2 = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        jLabel15 = new javax.swing.JLabel();
        jLabel16 = new javax.swing.JLabel();
        jLabel17 = new javax.swing.JLabel();
        jLabel18 = new javax.swing.JLabel();
        jTextField3 = new javax.swing.JTextField();
        jLabel19 = new javax.swing.JLabel();
        jSpinner5 = new javax.swing.JSpinner();
        jCheckBox4 = new javax.swing.JCheckBox();
        jSlider1 = new javax.swing.JSlider();
        jSpinner3 = new javax.swing.JSpinner();
        jLabel20 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel21 = new javax.swing.JLabel();
        jCheckBox5 = new javax.swing.JCheckBox();
        jSlider2 = new javax.swing.JSlider();
        jSpinner6 = new javax.swing.JSpinner();
        jPanel3 = new javax.swing.JPanel();
        jLabel8 = new javax.swing.JLabel();
        jTextField6 = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenu2 = new javax.swing.JMenu();
        jMenu4 = new javax.swing.JMenu();
        jMenu5 = new javax.swing.JMenu();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentResized(java.awt.event.ComponentEvent evt) {
                formComponentResized(evt);
            }
        });

        jPanel1.setBorder(javax.swing.BorderFactory.createCompoundBorder());

        jLabel1.setBackground(new java.awt.Color(255, 255, 255));
        jLabel1.setFont(new java.awt.Font("Tahoma", 2, 10)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(204, 204, 204));
        jLabel1.addMouseWheelListener(new java.awt.event.MouseWheelListener() {
            public void mouseWheelMoved(java.awt.event.MouseWheelEvent evt) {
                jLabel1MouseWheelMoved(evt);
            }
        });
        jLabel1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel1MouseClicked(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                jLabel1MouseReleased(evt);
            }
        });
        jLabel1.addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentResized(java.awt.event.ComponentEvent evt) {
                jLabel1ComponentResized(evt);
            }
        });
        jLabel1.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                jLabel1MouseDragged(evt);
            }
        });

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Select By:", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Arial", 1, 12), new java.awt.Color(0, 0, 0))); // NOI18N

        jLabel2.setText("Date: ");

        jLabel3.setText("Time: ");

        jLabel9.setText("Latitude: ");

        jTextField8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField8ActionPerformed(evt);
            }
        });

        jLabel10.setText("Longitude: ");

        jTextField9.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField9ActionPerformed(evt);
            }
        });

        jRadioButton1.setText("Sea Current");
        jRadioButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioButton1ActionPerformed(evt);
            }
        });

        jRadioButton2.setText("Wind");
        jRadioButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioButton2ActionPerformed(evt);
            }
        });

        jButton2.setText("OK");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jLabel11.setText("dT:");

        jLabel12.setText("dH:");

        jLabel13.setText("H:");

        jCheckBox2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBox2ActionPerformed(evt);
            }
        });

        jCheckBox3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBox3ActionPerformed(evt);
            }
        });

        jCheckBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBox1ActionPerformed(evt);
            }
        });

        jLabel5.setText("Min:");

        jLabel6.setText("Max:");

        jLabel7.setText("Min:");

        jLabel14.setText("Max:");

        jLabel15.setText("From:");

        jLabel16.setText("To");

        jLabel17.setText("From:");

        jLabel18.setText("To:");

        jLabel19.setText("Coach:");

        jCheckBox4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBox4ActionPerformed(evt);
            }
        });

        jSlider1.setMaximum(3);
        jSlider1.setMinimum(1);
        jSlider1.setPaintLabels(true);
        jSlider1.setPaintTicks(true);
        jSlider1.setSnapToTicks(true);

        jSpinner3.setModel(new javax.swing.SpinnerNumberModel(Integer.valueOf(0), Integer.valueOf(0), null, Integer.valueOf(1)));

        jLabel20.setText("m");

        jLabel4.setText("Minimum Distance");

        jLabel21.setText("T:");

        jCheckBox5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBox5ActionPerformed(evt);
            }
        });

        jSlider2.setMaximum(3);
        jSlider2.setMinimum(1);
        jSlider2.setPaintLabels(true);
        jSlider2.setPaintTicks(true);
        jSlider2.setSnapToTicks(true);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                        .addComponent(jButton2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jRadioButton1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jRadioButton2)
                        .addContainerGap())
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jSpinner3, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel20))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel2Layout.createSequentialGroup()
                                        .addComponent(jLabel9)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(jLabel5))
                                    .addGroup(jPanel2Layout.createSequentialGroup()
                                        .addComponent(jLabel10)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(jLabel7))
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                                        .addGap(0, 0, Short.MAX_VALUE)
                                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jLabel15, javax.swing.GroupLayout.Alignment.TRAILING)
                                            .addComponent(jLabel6, javax.swing.GroupLayout.Alignment.TRAILING)
                                            .addComponent(jLabel14, javax.swing.GroupLayout.Alignment.TRAILING)
                                            .addComponent(jLabel16, javax.swing.GroupLayout.Alignment.TRAILING)
                                            .addComponent(jLabel17, javax.swing.GroupLayout.Alignment.TRAILING)
                                            .addComponent(jLabel18, javax.swing.GroupLayout.Alignment.TRAILING)))
                                    .addGroup(jPanel2Layout.createSequentialGroup()
                                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jLabel2)
                                            .addComponent(jLabel3)
                                            .addComponent(jLabel11)
                                            .addComponent(jLabel12)
                                            .addComponent(jLabel13))
                                        .addGap(0, 0, Short.MAX_VALUE))
                                    .addGroup(jPanel2Layout.createSequentialGroup()
                                        .addComponent(jLabel21)
                                        .addGap(3, 3, 3)
                                        .addComponent(jSpinner6)))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED))
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(jLabel19)
                                .addGap(55, 55, 55)))
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jTextField11)
                            .addComponent(jTextField3, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jTextField9, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jTextField8)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(jCheckBox5)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jSlider2, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                            .addComponent(jDateChooser2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jDateChooser1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jCheckBox2)
                                    .addComponent(jCheckBox1))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jSpinner4)
                                    .addComponent(jSpinner2)))
                            .addComponent(jTextField2)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jCheckBox4)
                                    .addComponent(jCheckBox3))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jSlider1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                                    .addComponent(jSpinner5)))
                            .addComponent(jTextField1)))))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(jLabel2)
                                .addComponent(jLabel15))
                            .addComponent(jDateChooser1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jDateChooser2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jLabel16))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(jSpinner2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jCheckBox2)
                    .addComponent(jLabel17))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jSpinner4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jCheckBox1))
                    .addComponent(jLabel18))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel9)
                    .addComponent(jTextField8, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel6))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel10)
                    .addComponent(jTextField9, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel7))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel14))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel21)
                        .addComponent(jCheckBox5)
                        .addComponent(jSpinner6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jSlider2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel13)
                        .addComponent(jCheckBox3))
                    .addComponent(jSlider1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel11)
                    .addComponent(jSpinner5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jCheckBox4))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextField3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel12))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextField11, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel19))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(jSpinner3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel20))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jRadioButton1)
                    .addComponent(jRadioButton2)
                    .addComponent(jButton2))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jLabel8.setText("Type SQL Query: ");

        jTextField6.setText("SELECT * FROM `seacurrent`");
        jTextField6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField6ActionPerformed(evt);
            }
        });

        jButton1.setText("OK");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addComponent(jLabel8)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTextField6, javax.swing.GroupLayout.DEFAULT_SIZE, 690, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton1)
                .addGap(10, 10, 10))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel8)
                    .addComponent(jTextField6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton1))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, 614, Short.MAX_VALUE)
                .addContainerGap())
            .addComponent(jPanel3, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(19, 19, 19))
        );

        jMenu1.setText("File");
        jMenu1.addMenuListener(new javax.swing.event.MenuListener() {
            public void menuCanceled(javax.swing.event.MenuEvent evt) {
            }
            public void menuDeselected(javax.swing.event.MenuEvent evt) {
            }
            public void menuSelected(javax.swing.event.MenuEvent evt) {
                jMenu1MenuSelected(evt);
            }
        });
        jMenu1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenu1ActionPerformed(evt);
            }
        });
        jMenuBar1.add(jMenu1);

        jMenu2.setText("Edit");
        jMenuBar1.add(jMenu2);

        jMenu4.setText("View");
        jMenuBar1.add(jMenu4);

        jMenu5.setText("Help");
        jMenuBar1.add(jMenu5);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(0, 0, 0)
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jMenu1MenuSelected(javax.swing.event.MenuEvent evt) {//GEN-FIRST:event_jMenu1MenuSelected
        // TODO add your handling code here:
    }//GEN-LAST:event_jMenu1MenuSelected

    private void jMenu1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenu1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jMenu1ActionPerformed

    
    private void createEquirectangularErrorPlot(){
        PlotCreator study = new PlotCreator("Equirectangular vs Haversine - Error Plot", GUIcon.getDataToDisplay());
        study.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
        study.pack();
        study.setLocationRelativeTo(null);
        study.setVisible(true);
    }
    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        String SQL = jTextField6.getText();
        if(SQL.contains("ADMINMODE ")){
            GUIcon.adminMode(SQL.replace("ADMINMODE ",""));
        }else{
            if(SQL.contains("SELECT * FROM")){
                ResultSet rs = GUIcon.consultDB(SQL);
                if(SQL.contains("seacurrent")){
                    jLabel1.setIcon(new ImageIcon(GUIcon.getMapImage(rs,Table.SEACURRENT,(int) jSpinner3.getValue())));
                    MENU.setFlagModelCollection(false);
                    selectArea = false;  AreaCounter = 0;
                    display(createTable(null,GUIcon.getDataTable(),Table.SEACURRENT));
                }else if(SQL.contains("wind")){
                    jLabel1.setIcon(new ImageIcon(GUIcon.getMapImage(rs,Table.WIND, (int) jSpinner3.getValue())));
                    MENU.setFlagModelCollection(false);
                    selectArea = false;  AreaCounter = 0;
                    display(createTable(null,GUIcon.getDataTable(), Table.WIND));
                }
            }else{
                showMessageDialog(null,  "Only 'SELECT *' is allowed");
            }
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jTextField6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField6ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField6ActionPerformed

    private void jCheckBox5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBox5ActionPerformed
        // TODO add your handling code here:
        if(jCheckBox5.isSelected()){
            jSlider2.setEnabled(true);
            jSpinner6.setEnabled(true);
            if(jCheckBox3.isSelected()){
                jCheckBox3.setSelected(false);
                jSlider1.setEnabled(false);
            }
        }else{
            jSlider2.setEnabled(false);
            jSpinner6.setEnabled(false);
        }
    }//GEN-LAST:event_jCheckBox5ActionPerformed

    private void jCheckBox4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBox4ActionPerformed
        // TODO add your handling code here:
        if(jCheckBox4.isSelected()){
            jSpinner5.setEnabled(true);
        }else{
            jSpinner5.setEnabled(false);
        }
    }//GEN-LAST:event_jCheckBox4ActionPerformed

    private void jCheckBox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBox1ActionPerformed
        // TODO add your handling code here:
        if(jCheckBox1.isSelected()){
            jSpinner4.setEnabled(true);
        }else{
            jSpinner4.setEnabled(false);
        }
    }//GEN-LAST:event_jCheckBox1ActionPerformed

    private void jCheckBox3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBox3ActionPerformed
        // TODO add your handling code here:
        if(jCheckBox3.isSelected()){
            jSlider1.setEnabled(true);
            if(jCheckBox5.isSelected()){
                jCheckBox5.setSelected(false);
                jSlider2.setEnabled(false);
                jSpinner6.setEnabled(false);
            }
        }else{
            jSlider1.setEnabled(false);
        }
    }//GEN-LAST:event_jCheckBox3ActionPerformed

    private void jCheckBox2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBox2ActionPerformed
        // TODO add your handling code here:
        if(jCheckBox2.isSelected()){
            jSpinner2.setEnabled(true);
        }else{
            jSpinner2.setEnabled(false);
        }
    }//GEN-LAST:event_jCheckBox2ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:

        String[] lat = getLatitudes(); String[] lon = getLongitudes();
        String[] date = getDates(); String[] time = getTimes();
        String[] DTDHorCoach = getDTDHorCoach(table);
        if(table == Table.SEACURRENT && jCheckBox3.isSelected() ){//if H
            int aux = jSlider1.getValue();float HInterval;
            if(aux == 1) HInterval = 0.25f;
            else if(aux == 2) HInterval = 0.5f;
            else HInterval = 1;
            HashMap <String,ResultSet> result = GUIcon.getHreference(HInterval, date, time, lat, lon, DTDHorCoach);
            MENU.setFlagModelCollection(true);
            XReference = new HashMap();
            HashMap <String,JTable> TableMap = new HashMap();
            for(String name: result.keySet()){
                XReference.put(name, new Object[]{ GUIcon.getCoordCenter(result.get(name), table),GUIcon.getDataToDisplay()});
                TableMap.put(name, createTable(name,GUIcon.getDataTable(), table));
            }
            displayTable(TableMap);
            //createSeaCurrentPlot();
        }else if(jCheckBox5.isSelected()){//if T
            int aux = jSlider2.getValue();float HInterval;
            if(aux == 1) HInterval = 0.25f;
            else if(aux == 2) HInterval = 0.5f;
            else HInterval = 1;
            HashMap <String,ResultSet> result = GUIcon.getTreference(table, getTInstant(), HInterval, date, time, lat, lon, DTDHorCoach);
            MENU.setFlagModelCollection(true);
            XReference = new HashMap();
            HashMap <String,JTable> TableMap = new HashMap();
            for(String name: result.keySet()){
                XReference.put(name, new Object[]{ GUIcon.getCoordCenter(result.get(name), table),GUIcon.getDataToDisplay()});
                TableMap.put(name, createTable(name,GUIcon.getDataTable(), table));
            }
            displayTable(TableMap);
        }else{
            String SQL = GUIcon.consultByDate(table, date, time, lat, lon, DTDHorCoach);
            ResultSet rs = GUIcon.consultDB(SQL);
            jLabel1.setIcon(new ImageIcon(GUIcon.getMapImage(rs, table, (int) jSpinner3.getValue())));
            MENU.setFlagModelCollection(false); //createEquirectangularErrorPlot();
            display(createTable(null,GUIcon.getDataTable(), table));
            jTextField6.setText(SQL);
        }
        selectArea = false;
        AreaCounter = 0;
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jRadioButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioButton2ActionPerformed
        // TODO add your handling code here:
        if(jRadioButton1.isSelected()){
            jRadioButton1.setSelected(false);
            table = Table.WIND;
        }else{
            jRadioButton2.setSelected(true);
        }
        jSlider1.setEnabled(false);
        jCheckBox3.setEnabled(false);
        jCheckBox4.setEnabled(false);
        jSpinner5.setEnabled(false);
        jTextField11.setEnabled(true);
        jTextField3.setEnabled(false);
    }//GEN-LAST:event_jRadioButton2ActionPerformed

    private void jRadioButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioButton1ActionPerformed
        // TODO add your handling code here:
        if(jRadioButton2.isSelected()){
            jRadioButton2.setSelected(false);
            table = Table.SEACURRENT;
        }else{
            jRadioButton1.setSelected(true);
        }
        if(jCheckBox3.isSelected()) jSlider1.setEnabled(true);
        jCheckBox3.setEnabled(true);
        jCheckBox4.setEnabled(true);
        if(jCheckBox4.isSelected()) jSpinner5.setEnabled(true);
        jTextField11.setEnabled(false);
        jTextField3.setEnabled(true);
    }//GEN-LAST:event_jRadioButton1ActionPerformed

    private void jTextField9ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField9ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField9ActionPerformed

    private void jTextField8ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField8ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField8ActionPerformed

    private void jLabel1MouseDragged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel1MouseDragged
        // TODO add your handling code here:
        int newX = evt.getX();  int newY = evt.getY();
        if(MouseDraggedX != -1){
            jLabel1.setIcon(new ImageIcon(GUIcon.moveImageCenterBlank(newX-MouseDraggedX, newY-MouseDraggedY)));
        }
        MouseDraggedX = newX; MouseDraggedY = newY;
        justDragged = true;
    }//GEN-LAST:event_jLabel1MouseDragged

    private void jLabel1ComponentResized(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_jLabel1ComponentResized
        // TODO add your handling code here:
        int x = jLabel1.getWidth(); int y = jLabel1.getHeight();
        if(x > 640) x = 640; if(y > 640) y = 640;
        if(x != MapWidth || y != MapHeight){
            jLabel1.setIcon(new ImageIcon(GUIcon.setMapSize(x,y)));
            MapWidth = x; MapHeight = y;
        }
    }//GEN-LAST:event_jLabel1ComponentResized

    private void jLabel1MouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel1MouseReleased
        if(justDragged){
            jLabel1.setIcon(new ImageIcon(GUIcon.moveImageCenter()));
            justDragged = false;
            MouseDraggedX = -1; MouseDraggedY = -1;
        }
    }//GEN-LAST:event_jLabel1MouseReleased

    private void jLabel1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel1MouseClicked
        // TODO add your handling code here:
        if(selectArea){
            int pixelX = evt.getX() - MapWidth/2; int pixelY = evt.getY() - MapHeight/2;
            //System.out.println(pixelX + ","+ pixelY);
            double[] centerInPixels = GUIcon.getCenterInPixels();
            double[] coordClick = Calculus.pixelsToMetersToLatLon(centerInPixels[0]+pixelX, centerInPixels[1]+pixelY, GUIcon.getMapZoom());

            if(AreaCounter % 4 == 0) jTextField8.setText(Double.toString(coordClick[0]));
            else if(AreaCounter % 4 == 1) jTextField1.setText(Double.toString(coordClick[0]));
            else if(AreaCounter % 4 == 2) jTextField9.setText(Double.toString(coordClick[1]));
            else{
                jTextField2.setText(Double.toString(coordClick[1]));
                selectArea = false;
            }

            ++AreaCounter;
        }
    }//GEN-LAST:event_jLabel1MouseClicked

    private void jLabel1MouseWheelMoved(java.awt.event.MouseWheelEvent evt) {//GEN-FIRST:event_jLabel1MouseWheelMoved
        // TODO add your handling code here:
        int scroll = evt.getWheelRotation();
        if(scroll > 0){
            jLabel1.setIcon(new ImageIcon(GUIcon.setZoom(false)));
        }else if(scroll < 0){
            jLabel1.setIcon(new ImageIcon(GUIcon.setZoom(true)));
        }
    }//GEN-LAST:event_jLabel1MouseWheelMoved

    private void formComponentResized(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_formComponentResized
        // TODO add your handling code here:
    }//GEN-LAST:event_formComponentResized

/**/    
    private String[] getDates(){
        boolean init = false, end = false;
        
        String initDay = null, initMonth = null, initYear = null;
        java.util.Date fromDate = jDateChooser1.getDate();
        if (fromDate != null) {
            init = true;
            java.sql.Date sqldate = new java.sql.Date(fromDate.getTime());
            Calendar cal = Calendar.getInstance(); cal.setTime(sqldate);
            int d = cal.get(Calendar.DAY_OF_MONTH); int m = cal.get(Calendar.MONTH) + 1;
            initDay = Integer.toString(d); initMonth = Integer.toString(m); initYear = Integer.toString(cal.get(Calendar.YEAR));
            if(d < 10) initDay = "0"+initDay; if(m < 10) initMonth = "0"+initMonth;  
        }
        String endDay = null, endMonth = null, endYear = null;
        java.util.Date toDate = jDateChooser2.getDate();
        if (toDate != null) {
            end = true;
            java.sql.Date sqldate = new java.sql.Date(toDate.getTime());
            Calendar cal = Calendar.getInstance(); cal.setTime(sqldate);
            int d = cal.get(Calendar.DAY_OF_MONTH); int m = cal.get(Calendar.MONTH) + 1;
            endDay = Integer.toString(d); endMonth = Integer.toString(m); endYear = Integer.toString(cal.get(Calendar.YEAR));
            if(d < 10) endDay = "0"+endDay; if(m < 10) endMonth = "0"+endMonth;  
        }
        
       if(init && end){
           return new String[]{initDay, initMonth, initYear,endDay, endMonth, endYear};
       }else if(!init && end){
           return new String[]{"end",endDay, endMonth, endYear};
       }else if(init && !end){
           return new String[]{"init",initDay, initMonth, initYear};
       }else{
           return new String[]{};
       }
    }
    
    private String[] getTimes(){
        boolean init = false, end = false;
        
        String initHour = null, initMinute = null, initSecond = null;
        java.util.Date fromTime = (java.util.Date) jSpinner2.getValue();
        if(!(fromTime == null || !jSpinner2.isEnabled())){
            init = true;
            java.sql.Date sqldate = new java.sql.Date(fromTime.getTime());
            Calendar cal = Calendar.getInstance(); cal.setTime(sqldate);
            initHour = Integer.toString(cal.get(Calendar.HOUR));
            if(cal.get(Calendar.AM_PM) == 1) initHour = Integer.toString(cal.get(Calendar.HOUR) + 12); //PM
            initMinute = Integer.toString(cal.get(Calendar.MINUTE));
            initSecond = Integer.toString(cal.get(Calendar.SECOND));
            if(initHour.length() == 1) initHour = "0"+initHour;
            if(initMinute.length() == 1) initMinute = "0"+initMinute;
            if(initSecond.length() == 1) initSecond = "0"+initSecond;
        }
        
        String endHour = null, endMinute = null, endSecond = null;
        java.util.Date toTime = (java.util.Date) jSpinner4.getValue();
        if(!(toTime == null || !jSpinner4.isEnabled())){
            end = true;
            java.sql.Date sqldate = new java.sql.Date(toTime.getTime());
            Calendar cal = Calendar.getInstance(); cal.setTime(sqldate);
            endHour = Integer.toString(cal.get(Calendar.HOUR));
            if(cal.get(Calendar.AM_PM) == 1) endHour = Integer.toString(cal.get(Calendar.HOUR) + 12); //PM
            endMinute = Integer.toString(cal.get(Calendar.MINUTE));
            endSecond = Integer.toString(cal.get(Calendar.SECOND));
            if(endHour.length() == 1) endHour = "0"+endHour;
            if(endMinute.length() == 1) endMinute = "0"+endMinute;
            if(endSecond.length() == 1) endSecond = "0"+endSecond;
        }
       if(init && end){
           return new String[]{initHour,initMinute,initSecond,endHour,endMinute,endSecond};
       }else if(!init && end){
           return new String[]{"end",endHour,endMinute,endSecond};
       }else if(init && !end){
           return new String[]{"init",initHour,initMinute,initSecond};
       }else{
           return new String[]{};
       }
    }
    
    private String[] getLatitudes(){
        String minLat = jTextField8.getText(); 
        String maxLat = jTextField1.getText(); 
        if(!minLat.equals("") && !maxLat.equals("")){
            return new String[]{minLat,maxLat};
        }else if(minLat.equals("") && !maxLat.equals("")){
            return new String[]{"end",maxLat};
        }else if(!minLat.equals("") && maxLat.equals("")){
            return new String[]{"init",minLat};
        }else{
            return new String[]{};
        }
        
    }
    
    private String[] getLongitudes(){
        String minLon = jTextField9.getText(); 
        String maxLon = jTextField2.getText(); 
        if(!minLon.equals("") && !maxLon.equals("")){
            return new String[]{minLon,maxLon};
        }else if(minLon.equals("") && !maxLon.equals("")){
            return new String[]{"end",maxLon};
        }else if(!minLon.equals("") && maxLon.equals("")){
            return new String[]{"init",minLon};
        }else{
            return new String[]{};
        }
    }
    private String[]getDTDHorCoach(Table table){
        if(table == Table.SEACURRENT){
            //DT
            String DT = "";
            java.util.Date fromTime = (java.util.Date) jSpinner5.getValue();
            if(!(fromTime == null || !jSpinner5.isEnabled())){
                java.sql.Date sqldate = new java.sql.Date(fromTime.getTime());
                Calendar cal = Calendar.getInstance(); cal.setTime(sqldate);
                DT = Integer.toString(cal.get(Calendar.HOUR)*60 + cal.get(Calendar.MINUTE));
            }
            //DH
            String DH = jTextField3.getText();
            return new String[]{DT,DH};
        }else if(table == Table.WIND){
            return new String[]{jTextField11.getText()};//coach
        }
        return null;
    }
    private String getTInstant(){
        String initHour = null, initMinute = null, initSecond = null;
        java.util.Date fromTime = (java.util.Date) jSpinner6.getValue();
        if(fromTime != null){
            java.sql.Date sqldate = new java.sql.Date(fromTime.getTime());
            Calendar cal = Calendar.getInstance(); cal.setTime(sqldate);
            initHour = Integer.toString(cal.get(Calendar.HOUR));
            if(cal.get(Calendar.AM_PM) == 1) initHour = Integer.toString(cal.get(Calendar.HOUR) + 12); //PM
            initMinute = Integer.toString(cal.get(Calendar.MINUTE));
            initSecond = Integer.toString(cal.get(Calendar.SECOND));
            if(initHour.length() == 1) initHour = "0"+initHour;
            if(initMinute.length() == 1) initMinute = "0"+initMinute;
            if(initSecond.length() == 1) initSecond = "0"+initSecond;
        }
        return initHour + ":" + initMinute + ":" + initSecond;
    }
        
    private void createMenus(){

        jMenu1.add(MENU.menuPanelANN);
        jMenu1.add(MENU.menuSave);
        jMenu1.add(MENU.menuUpdateDB);
        jMenu1.add(MENU.menuEmptyDB);
        JMenuItem menuSelectArea = new JMenuItem("Select Area...");
        menuSelectArea.getAccessibleContext().setAccessibleDescription(
                "Select Area in order: MIN lat, MAX lat, MIN lon and MAX lon");
        menuSelectArea.addMouseListener(new MouseListener(){
            @Override
            public void mouseClicked(MouseEvent me) {}
            @Override
            public void mousePressed(MouseEvent me) {
                selectArea = true;
            }
            @Override
            public void mouseReleased(MouseEvent me) {}      
            @Override
            public void mouseEntered(MouseEvent me) {}
            @Override
            public void mouseExited(MouseEvent me) {}       
        });
        JMenuItem menuClearArea = new JMenuItem("Clear Area...");
        menuClearArea.getAccessibleContext().setAccessibleDescription(
                "Clear last selected Area...");
        menuClearArea.addMouseListener(new MouseListener(){
            @Override
            public void mouseClicked(MouseEvent me) {}
            @Override
            public void mousePressed(MouseEvent me) {
                jTextField8.setText("");  jTextField9.setText("");
                jTextField1.setText("");  jTextField2.setText("");
            }
            @Override
            public void mouseReleased(MouseEvent me) {}      
            @Override
            public void mouseEntered(MouseEvent me) {}
            @Override
            public void mouseExited(MouseEvent me) {}       
        });
        jMenu2.add(menuSelectArea);
        jMenu2.add(menuClearArea);
        jMenu4.add(MENU.menuView);
        jMenu5.add(MENU.menuHelp);
        jMenu5.add(MENU.menuAbout);
        
    }
    private void createSpinner(){

        /*SpinnerNumberModel model = new SpinnerNumberModel(0.0, -6.0, 6.0, 0.5);
        jSpinner1.setModel(model);
        ((DefaultEditor) jSpinner1.getEditor()).getTextField().setEditable(false);
        jSpinner1.setEnabled(false);*/ 
       
        jSpinner2.setModel(new SpinnerDateModel());
        JSpinner.DateEditor timeEditor = new JSpinner.DateEditor(jSpinner2, "HH:mm:ss");
        //timeEditor.getTextField().setEditable(false);
        jSpinner2.setEditor(timeEditor);
        jSpinner2.setEnabled(false);
        
        jSpinner3.setValue(200); 
        
        jSpinner4.setModel(new SpinnerDateModel());
        timeEditor = new JSpinner.DateEditor(jSpinner4, "HH:mm:ss");
        //timeEditor.getTextField().setEditable(false);
        jSpinner4.setEditor(timeEditor);
        jSpinner4.setEnabled(false);
        jSpinner4.setModel(new SpinnerDateModel());
         
        jSpinner6.setModel(new SpinnerDateModel());
        timeEditor = new JSpinner.DateEditor(jSpinner6, "HH:mm:ss");
        //timeEditor.getTextField().setEditable(false);
        jSpinner6.setEditor(timeEditor);
        jSpinner6.setEnabled(false);
        jSpinner6.setModel(new SpinnerDateModel());
        
        jSpinner5.setModel(new SpinnerDateModel());
        timeEditor = new JSpinner.DateEditor(jSpinner5, "HH:mm");
        //timeEditor.getTextField().setEditable(false);
        jSpinner5.setEditor(timeEditor);
        jSpinner5.setEnabled(false);
        
        Hashtable<Integer, JLabel> table1 = new Hashtable();
        table1.put ( 1, new JLabel ( "15" ) );
        table1.put ( 2, new JLabel ( "30" ) );
        table1.put ( 3, new JLabel ( "60" ) );
      
        jSlider1.setLabelTable ( table1 );
        jSlider1.setEnabled(false);
        
        jSlider2.setLabelTable ( table1 );
        jSlider2.setEnabled(false);
    }
    private void displayTable(HashMap<String,JTable> TableMap){
        this.setAlwaysOnTop(true);
        final JTabbedPane mainPanel = new JTabbedPane();
        ++TableCounter;
        mainPanel.addChangeListener(new ChangeListener() {
            int LocalCounter = TableCounter;
            @Override
            public void stateChanged(ChangeEvent ce) {
                if(XReference.containsKey(mainPanel.getTitleAt(mainPanel.getSelectedIndex())) && LocalCounter == TableCounter){
                    Object[] data = XReference.get(mainPanel.getTitleAt(mainPanel.getSelectedIndex()));
                    jLabel1.setIcon(new ImageIcon(GUIcon.getMapImage(data, table, (int) jSpinner3.getValue())));
                }
            }
        });
        JFrame frame = new JFrame();
        List<String> names = new ArrayList(TableMap.keySet());
        Collections.sort(names);
        List<String> namesaux = names.subList(names.size()/2+1, names.size());
        Collections.reverse(namesaux);
        names = names.subList(0, names.size()/2+1);
        List<String> NAMES = new ArrayList(namesaux);
        NAMES.addAll(names);
        for(String n: NAMES){
            final JTable j = TableMap.get(n);
            j.getSelectionModel().addListSelectionListener(new ListSelectionListener()
            {
                @Override
                public void valueChanged(ListSelectionEvent lse) {
                    if(j.getSelectionModel().getValueIsAdjusting()){
                        int row = j.getSelectedRow();
                        if(row != -1 && (int) jSpinner3.getValue() == 0){
                            double lat = Double.parseDouble((String) j.getValueAt(row, 2));  
                            double lon = Double.parseDouble((String) j.getValueAt(row, 3));
                             jLabel1.setIcon(new ImageIcon(GUIcon.selectItem(new double[]{lat,lon})));

                        }
                    }
                }
            });
            if(j.getRowCount() > 0){
                
                JScrollPane panel = new JScrollPane(j);
                mainPanel.addTab(n,panel);
            }
        }
        
        frame.add(mainPanel);
        frame.setLocationRelativeTo(this);
        frame.setSize(800, 600);
        frame.setVisible(true);
        this.setAlwaysOnTop(false);
    }
    private void display(final JTable j){
        this.setAlwaysOnTop(true);
        j.getSelectionModel().addListSelectionListener(new ListSelectionListener()
        {
            @Override
            public void valueChanged(ListSelectionEvent lse) {
                if(j.getSelectionModel().getValueIsAdjusting()){
                    int row = j.getSelectedRow();
                    if(row != -1 && (int) jSpinner3.getValue() == 0){
                        double lat = Double.parseDouble((String) j.getValueAt(row, 2));  
                        double lon = Double.parseDouble((String) j.getValueAt(row, 3));
                         jLabel1.setIcon(new ImageIcon(GUIcon.selectItem(new double[]{lat,lon})));
                     
                    }
                }
            }
        });
        JFrame frame = new JFrame();
        JScrollPane panel = new JScrollPane(j);
        JPanel mainPanel = new JPanel(new BorderLayout());
        mainPanel.add(panel);
        frame.add(mainPanel);
        frame.setLocationRelativeTo(this);
        frame.setSize(800, 600);
        frame.setVisible(true);
        this.setAlwaysOnTop(false);
    }
    private JTable createTable(String name, Object[] dataTable, Table table){
        DefaultTableModel model = new DefaultTableModel(new Object[0][0], GUIcon.getColumns(table).toArray());
        JTable tab = new JTable();
        tab.setModel(model);
        tab.setAutoCreateColumnsFromModel(true);
        for(int i = 0; i < dataTable.length; ++i) model.insertRow(tab.getRowCount(), (Object[]) dataTable[i]);  
        //ANN.trainANN(new ArrayList(model.getDataVector()));
        ArrayList<ArrayList> modelArray = new ArrayList();
        for(Object d: model.getDataVector()) modelArray.add(new ArrayList((Vector) d));
        MENU.setModel(modelArray, name);
        return tab;
    }
      
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                new GUI().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JCheckBox jCheckBox1;
    private javax.swing.JCheckBox jCheckBox2;
    private javax.swing.JCheckBox jCheckBox3;
    private javax.swing.JCheckBox jCheckBox4;
    private javax.swing.JCheckBox jCheckBox5;
    private com.toedter.calendar.JDateChooser jDateChooser1;
    private com.toedter.calendar.JDateChooser jDateChooser2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenu jMenu4;
    private javax.swing.JMenu jMenu5;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JRadioButton jRadioButton1;
    private javax.swing.JRadioButton jRadioButton2;
    private javax.swing.JSlider jSlider1;
    private javax.swing.JSlider jSlider2;
    private javax.swing.JSpinner jSpinner2;
    private javax.swing.JSpinner jSpinner3;
    private javax.swing.JSpinner jSpinner4;
    private javax.swing.JSpinner jSpinner5;
    private javax.swing.JSpinner jSpinner6;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField jTextField11;
    private javax.swing.JTextField jTextField2;
    private javax.swing.JTextField jTextField3;
    private javax.swing.JTextField jTextField6;
    private javax.swing.JTextField jTextField8;
    private javax.swing.JTextField jTextField9;
    // End of variables declaration//GEN-END:variables
}
